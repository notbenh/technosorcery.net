#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  canonicalize_created_at
  generate_summary_pages
end

# don’t filter or layout
compile '/stylesheets/*' do; end
compile '/javascripts/*' do; end
compile '/htaccess/'     do; end
compile '/pubkey_asc/'   do; end
compile '/resume_pdf/'   do; end

compile '/feed/atom/' do
  filter :erb
end

compile '/posts/*', :rep => :feed do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter(
      :colorize_syntax,
      :default_colorizer => :pygmentize,
      :pygmentize => { :linenos => :table }
    )
    case item[:extension]
    when 'txt'
      filter :redcloth
    when 'md', 'markdown'
      # Need to make sure we use symbolic entity output, since the
      # default is to output the character itself, which is not so
      # much with the goodness.
      filter :kramdown, :entity_output => :symbolic
    when 'haml'
      filter :haml
    end
  end
end

compile '/posts/*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter(
      :colorize_syntax,
      :default_colorizer => :pygmentize,
      :pygmentize => { :linenos => :table }
    )
    case item[:extension]
    when 'txt'
      filter :redcloth
    when 'md', 'markdown'
      # Need to make sure we use symbolic entity output, since the
      # default is to output the character itself, which is not so
      # much with the goodness.
      filter :kramdown, :entity_output => :symbolic
    when 'haml'
      filter :haml
    end
    if @item[:layout]
      layout(@item[:layout])
    elsif @item[:kind] == 'article'
      layout('entry')
    end
    layout 'default'
    filter :relativize_paths, :type => :html
  end
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    case item[:extension]
    when 'txt'
      filter :redcloth
    when 'md', 'markdown'
      filter :kramdown
    when 'haml'
      filter :haml
    end
    if @item[:layout]
      layout(@item[:layout])
    elsif @item[:kind] == 'article'
      layout('entry')
    end
    layout 'default'
    filter :relativize_paths, :type => :html
  end
end

route '/stylesheets/*' do
  item.identifier.chop + '.' + item[:extension]
end

route '/javascripts/*' do
  item.identifier.chop + '.' + item[:extension]
end

route '/htaccess/' do
  '/.htaccess'
end

route '/pubkey_asc/' do
  '/pubkey.asc'
end

route '/resume_pdf/' do
  '/resume.pdf'
end

route '/feed/atom/' do
  '/feed/atom.xml'
end

# For internal use only.
route '/posts/*', :rep => :feed do; end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml, :format => :html5
